<!-- Popup HTML -->
<div id="product-popup" class="popup hidden">
  <div class="popup-content">
   <div class="popup-content">
  <span class="popup-close">&times;</span>

  <div class="popup-body">
    <div class="popup-image">
      <img id="popup-image" src="" alt="">
    </div>

    <div class="popup-details">
      <h2 id="popup-title"></h2>
      <p id="popup-price"></p>
      <p id="popup-description"></p>
    </div>
  </div>

  <!-- NEW: actions live BELOW the image+details -->
  <div class="popup-actions">
    <label class="field-label">Color</label>
    <div id="popup-colors" class="color-container"></div>

    <label class="field-label" for="popup-variant">Size</label>
    <select id="popup-variant">
      <option value="">Choose your size</option>
    </select>

    <button id="popup-add-to-cart">ADD TO CART</button>


      </div>
    </div>
  </div>
</div>


<div class="custom-grid">
  <div class="grid-wrapper">
    {% for i in (1..6) %}
  {% assign setting_id = "product_" | append: i %}
  {% assign product = all_products[section.settings[setting_id]] %}
  {% if product %}
    <div class="grid-item" data-handle="{{ product.handle }}">
      <div class="grid-img">
       <img src="{{ product.featured_image | img_url: '400x400', crop: 'center' }}" alt="{{ product.title }}">

      </div>
      <h3 class="grid-title">{{ product.title }}</h3>
      <p class="grid-price">{{ product.price | money }}</p>
    </div>
  {% endif %}
{% endfor %}

  </div>
</div>

<style>
.custom-grid {
  padding: 40px 20px;
}
.grid-wrapper {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 20px;
}
.grid-item {
  background: #fff;
  border-radius: 12px;
  padding: 15px;
  text-align: center;
  cursor: pointer;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}
.grid-item:hover {
  transform: translateY(-5px);
  box-shadow: 0 8px 20px rgba(0,0,0,0.08);
}
.grid-img img {
  max-width: 100%;
  height: auto;
  border-radius: 8px;
  object-fit: cover;   /* makes sure images donâ€™t stretch weirdly */
  max-height: 250px;   /* keep them from being too tall */
}

.grid-title {
  font-size: 1rem;
  margin: 10px 0 5px;
}
.grid-price {
  font-size: 0.9rem;
  color: #555;
}


/* Responsive */
@media screen and (max-width: 900px) {
  .grid-wrapper {
    grid-template-columns: repeat(2, 1fr);
  }
}
@media screen and (max-width: 600px) {
  .grid-wrapper {
    grid-template-columns: 1fr;
  }
}

/* Keep image + details side-by-side on desktop */
.popup-body {
  display: flex;
  gap: 20px;
  align-items: flex-start;
  flex-wrap: wrap;
}

/* Actions block spans full width below */
.popup-actions {
  margin-top: 10px;
  display: flex;
  flex-direction: column;
  gap: 10px;
}

/* Optional small label style */
.field-label {
  font-size: 14px;
  color: #111;
}

/* Make color row look like the screenshot: one wide field with two boxes */
.color-container {
  display: flex;
  width: 100%;
  border: 1px solid #ccc;
  border-radius: 6px;
  overflow: hidden;
}

/* Color boxes fill 50/50, start white, thin 3px real-color strip on left */
.color-box {
  position: relative;
  flex: 1;
  min-width: 0;
  height: 46px;
  background: #fff;
  cursor: pointer;
  color: #000;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: background .2s ease, color .2s ease;
}

/* vertical divider between boxes */
.color-box + .color-box {
  border-left: 1px solid #ccc;
}

/* 3px left strip showing the real color */
.color-box::before {
  content: "";
  position: absolute;
  left: 0; top: 0;
  width: 3px;
  height: 100%;
  background: var(--square-color, #000);
  border-radius: 6px 0 0 6px;
}

/* Selected: whole box (and strip) goes black with white text */
.color-box.selected { background: #000; color: #fff; }
.color-box.selected::before { background: #000; }

.color-box span { pointer-events: none; }

/* Inputs/buttons full width to match screenshot */
#popup-variant,
#popup-add-to-cart {
  width: 100%;
}

#popup-variant {
  padding: 12px;
  border: 1px solid #ddd;
  border-radius: 6px;
  background: #f9f9f9;
  font-size: 14px;
}

#popup-add-to-cart {
  padding: 14px;
  background: #000;
  color: #fff;
  font-weight: 600;
  border: none;
  border-radius: 6px;
  transition: transform .2s ease, box-shadow .2s ease, opacity .2s ease;
}

#popup-add-to-cart:hover {
  opacity: .92;
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(0,0,0,.15);
}

/* Mobile: stack image over details (actions already below) */
@media (max-width: 900px) {
  .popup-body { flex-direction: column; }
  .popup-image img { max-width: 100%; }
}

</style>



<script>
document.addEventListener("DOMContentLoaded", function() {
  const popup = document.getElementById("product-popup");
  const popupClose = document.querySelector(".popup-close");
  const popupTitle = document.getElementById("popup-title");
  const popupImage = document.getElementById("popup-image");
  const popupPrice = document.getElementById("popup-price");
  const popupDescription = document.getElementById("popup-description");
  const popupVariant = document.getElementById("popup-variant");
  const popupAddToCart = document.getElementById("popup-add-to-cart");
  const popupColors = document.getElementById("popup-colors");

  document.querySelectorAll(".grid-item").forEach(item => {
    item.addEventListener("click", function() {
      const handle = this.dataset.handle;

      fetch(`/products/${handle}.js`)
        .then(res => res.json())
        .then(product => {
          popupTitle.textContent = product.title;
          popupImage.src = product.images[0] || "";
          popupPrice.textContent = (product.price / 100).toLocaleString("en-US", { style: "currency", currency: "EUR" });
          popupDescription.textContent = product.description;

          // --- Populate sizes ---
          popupVariant.innerHTML = `<option value="">Choose your size</option>`;
          product.variants.forEach(v => {
            const opt = document.createElement("option");
            opt.value = v.id;
            opt.textContent = v.option1;
            popupVariant.appendChild(opt);
          });

          // --- Populate colors ---
          popupColors.innerHTML = "";
          const colors = [...new Set(product.variants.map(v => v.option2))]; // unique colors

       colors.forEach(color => {
  const box = document.createElement("div");
  box.className = "color-box";
  box.style.setProperty("--square-color", color.toLowerCase());

  const label = document.createElement("span");
  label.textContent = color;
  box.appendChild(label);

  box.addEventListener("click", () => {
    document.querySelectorAll(".color-box").forEach(b => b.classList.remove("selected"));
    box.classList.add("selected");

    // filter sizes
    popupVariant.innerHTML = `<option value="">Choose your size</option>`;
    product.variants
      .filter(v => v.option2 === color)
      .forEach(v => {
        const opt = document.createElement("option");
        opt.value = v.id;
        opt.textContent = v.option1;
        popupVariant.appendChild(opt);
      });
  });

  popupColors.appendChild(box);
});



          // auto-select first color
          {% comment %} if (popupColors.firstChild) popupColors.firstChild.click(); {% endcomment %}

          popup.classList.remove("hidden");
        });
    });
  });

  // Add to cart
  popupAddToCart.addEventListener("click", () => {
    const variantId = popupVariant.value;
    if(!variantId) return alert("Please select a size.");

    fetch("/cart/add.js", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ id: variantId, quantity: 1 })
    })
    .then(res => res.json())
    .then(data => {
      alert("Added to cart: " + data.title);
      popup.classList.add("hidden");
    })
    .catch(err => console.error(err));
  });

  // Close popup
  popupClose.addEventListener("click", () => popup.classList.add("hidden"));
  popup.addEventListener("click", e => { if(e.target === popup) popup.classList.add("hidden"); });
});
</script>


{% schema %}
{
  "name": "Custom Product Grid",
  "settings": [
    {
      "type": "product",
      "id": "product_1",
      "label": "Product 1"
    },
    {
      "type": "product",
      "id": "product_2",
      "label": "Product 2"
    },
    {
      "type": "product",
      "id": "product_3",
      "label": "Product 3"
    },
    {
      "type": "product",
      "id": "product_4",
      "label": "Product 4"
    },
    {
      "type": "product",
      "id": "product_5",
      "label": "Product 5"
    },
    {
      "type": "product",
      "id": "product_6",
      "label": "Product 6"
    }
  ],
  "presets": [
    {
      "name": "Custom Product Grid",
      "category": "Custom"
    }
  ]
}


{% endschema %}