<div id="product-popup" class="popup hidden">
  <div class="popup-content">
    <span class="popup-close">&times;</span>
    <div class="popup-body"> 
      
      <!-- Left: Image -->
      <div class="popup-image-wrap">
        <img id="popup-image" src="" alt="">
      </div>

      <!-- Right: Details -->
      <div class="popup-details">
        <h2 id="popup-title"></h2>
        <p id="popup-price"></p>
        <p id="popup-description"></p>

        <!-- ✅ Dynamic Color Options -->
        <div class="color-options">
  <p>Color</p>
  <div id="popup-colors" class="color-scroll">
    
  </div>
</div>

<label for="popup-variant">Size</label>
<select id="popup-variant">
  <option>Choose your size</option>
</select>

<button id="popup-add-to-cart">ADD TO CART →</button>

      </div>
    </div>
  </div>
</div>


<!-- Product Grid -->
<div class="custom-grid">
  <div class="grid-wrapper">
    {% for i in (1..6) %}
      {% assign setting_id = "product_" | append: i %}
      {% assign product = all_products[section.settings[setting_id]] %}
      {% if product %}
        <div class="grid-item" data-handle="{{ product.handle }}">
          <div class="grid-img">
            <img src="{{ product.featured_image | img_url: '400x400', crop: 'center' }}" alt="{{ product.title }}">
          </div>
          <h3 class="grid-title">{{ product.title }}</h3>
          <p class="grid-price">{{ product.price | money }}</p>
        </div>
      {% endif %}
    {% endfor %}
  </div>
</div>


<style>
/* ================= GRID LIST ================= */
.custom-grid {
  padding: 40px 20px;
}
.grid-wrapper {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 20px;
}
.grid-item {
  background: #fff;
  border-radius: 12px;
  padding: 15px;
  text-align: center;
  cursor: pointer;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}
.grid-item:hover {
  transform: translateY(-5px);
  box-shadow: 0 8px 20px rgba(0,0,0,0.08);
}
.grid-img img {
  max-width: 100%;
  height: auto;
  border-radius: 8px;
  object-fit: cover;
  max-height: 250px;
}
.grid-title {
  font-size: 1rem;
  margin: 10px 0 5px;
}
.grid-price {
  font-size: 0.9rem;
  color: #555;
}

/* ================= POPUP ================= */
.popup {
  position: fixed;
  top: 0; left: 0;
  width: 100%; height: 100%;
  background: rgba(0,0,0,0.6);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 9999;
}
.popup.hidden { display: none; }

/* Popup box */
.popup-content {
  background: #fff;
  border-radius: 12px;
  max-width: 600px;   /* smaller popup */
  width: 95%;
  max-height: 85vh;   /* fits inside screen */
  overflow-y: auto;   /* scroll inside if too tall */
  padding: 25px;
  display: flex;
  flex-direction: column;
  position: relative;
}

/* Close button */
.popup-close {
  position: absolute;
  top: 15px;
  right: 15px;
  width: 35px;
  height: 35px;
  background: #f5f5f5;
  color: #444;
  font-size: 22px;
  font-weight: bold;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: all 0.3s ease;
  box-shadow: 0 2px 6px rgba(0,0,0,0.1);
}
.popup-close:hover {
  background: rgb(180, 50, 50);
  color: #fff;
  transform: scale(1.1);
}

/* Layout: image + details side by side */
.popup-body {
  display: flex;
  gap: 25px;
  align-items: flex-start;
}

/* Left: image */
.popup-image-wrap {
  flex: 1;
  max-width: 45%;
}
.popup-image-wrap img {
  width: 100%;
  height: auto;
  border-radius: 8px;
  object-fit: contain;
}

/* Right: details */
.popup-details {
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: 15px;
  text-align: left;
}
#popup-title {
  font-size: 22px;
  font-weight: 700;
}
#popup-price {
  font-size: 20px;
  font-weight: 600;
  color: rgb(33, 229, 118);
}
#popup-description {
  font-size: 14px;
  color: #555;
  line-height: 1.5;
}

/* Variant dropdown */
#popup-variant {
  padding: 10px 12px;
  border: 1px solid #ddd;
  border-radius: 8px;
  font-size: 14px;
  background: #f9f9f9;
  transition: border-color 0.2s ease;
}
#popup-variant:focus {
  border-color: #333;
  outline: none;
  background: #fff;
}

/* Add to cart */
#popup-add-to-cart {
  padding: 14px;
  background: rgb(33, 229, 118);
  color: #fff;
  font-size: 16px;
  font-weight: 600;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  transition: all 0.3s ease;
}
#popup-add-to-cart:hover {
  background: rgb(25, 190, 95);
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

/* ================= COLOR OPTIONS ================= */
.color-options {
  width: 100%;
  text-align: left;
}
.color-options p {
  font-size: 14px;
  margin-bottom: 8px;
  color: #333;
}

/* Scrollable row */
.color-scroll {
  display: flex;
  gap: 6px;
  overflow-x: auto;
  padding-bottom: 6px;
}
.color-scroll::-webkit-scrollbar {
  height: 6px;
}
.color-scroll::-webkit-scrollbar-thumb {
  background: #ccc;
  border-radius: 4px;
}

/* Each color box */
.color-box {
  display: flex;
  align-items: center;
  gap: 6px;
  border: 1px solid #ccc;
  padding: 6px 10px;
  border-radius: 6px;
  cursor: pointer;
  flex-shrink: 0;   /* don’t shrink */
  transition: 0.2s;
  white-space: nowrap;
}
.color-box:hover {
  background: #f9f9f9;
}
.color-box.selected {
  border: 2px solid #000;
  background: #f2f2f2;
}

/* Small colored square */
.color-square {
  width: 16px;
  height: 16px;
  border-radius: 4px;
  border: 1px solid #aaa;
}

/* ================= RESPONSIVE ================= */
@media (max-width: 700px) {
  .popup-body {
    flex-direction: column;
  }
  .popup-image-wrap, .popup-details {
    max-width: 100%;
  }
}
</style>




<script>
{% comment %} document.addEventListener("DOMContentLoaded", function() {
  const popup = document.getElementById("product-popup");
  const popupClose = document.querySelector(".popup-close");
  const popupTitle = document.getElementById("popup-title");
  const popupImage = document.getElementById("popup-image");
  const popupPrice = document.getElementById("popup-price");
  const popupDescription = document.getElementById("popup-description");
  const popupVariant = document.getElementById("popup-variant");
  const popupAddToCart = document.getElementById("popup-add-to-cart");

  // Handle grid item click
  document.querySelectorAll(".grid-item").forEach(item => {
    item.addEventListener("click", function() {
      const handle = this.getAttribute("data-handle");

      // Fetch product JSON by handle
      fetch(`/products/${handle}.js`)
        .then(res => res.json())
        .then(product => {
          popupTitle.textContent = product.title;
          popupImage.src = product.images[0] || "";
          popupPrice.textContent = (product.price / 100).toLocaleString("en-US", {
            style: "currency",
            currency: "USD"
          });
          popupDescription.textContent = product.description;

          // Populate variants
          popupVariant.innerHTML = "";
          product.variants.forEach(variant => {
            let option = document.createElement("option");
            option.value = variant.id;
            option.textContent = variant.title + " - " + (variant.price / 100).toLocaleString("en-US", {
              style: "currency",
              currency: "USD"
            });
            popupVariant.appendChild(option);
          });

          popup.classList.remove("hidden");

          // Add to Cart
          popupAddToCart.onclick = function() {
            const variantId = popupVariant.value;
            fetch("/cart/add.js", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ id: variantId, quantity: 1 })
            })
              .then(res => res.json())
              .then(data => {
                alert("Added to cart: " + data.title);
                popup.classList.add("hidden");
              })
              .catch(err => console.error(err));
          };
        });
    });
  });

  // Close popup
  popupClose.addEventListener("click", () => popup.classList.add("hidden"));
  popup.addEventListener("click", e => {
    if (e.target === popup) popup.classList.add("hidden");
  });
}); {% endcomment %}

document.addEventListener("DOMContentLoaded", () => {
  const popup = document.getElementById("product-popup");
  const popupClose = document.querySelector(".popup-close");

  // Grid item click → open popup
  document.querySelectorAll(".grid-item").forEach(item => {
    item.addEventListener("click", () => {
      const handle = item.dataset.handle;

      fetch(`/products/${handle}.js`)
        .then(res => res.json())
        .then(product => {
          // --- Basic info ---
          document.getElementById("popup-title").textContent = product.title;
          document.getElementById("popup-price").textContent =
            (product.price / 100).toFixed(2) + " " + product.currency;
          document.getElementById("popup-image").src = product.images[0];
          document.getElementById("popup-description").textContent = product.description;

          // --- Color options ---
          const colorContainer = document.getElementById("popup-colors");
          colorContainer.innerHTML = "";

          const colors = [...new Set(product.variants.map(v => v.option2))];

          {% comment %} colors.forEach(color => {
            const wrapper = document.createElement("div");
            wrapper.className = "color-box";
            wrapper.dataset.color = color;

            // small square with bg color
            const square = document.createElement("span");
            square.className = "color-square";
            square.style.backgroundColor = color.toLowerCase();

            // text label
            const label = document.createElement("span");
            label.textContent = color;

            wrapper.appendChild(square);
            wrapper.appendChild(label);

            wrapper.addEventListener("click", () => {
              // remove old selection
              document.querySelectorAll(".color-box").forEach(el =>
                el.classList.remove("selected")
              );
              wrapper.classList.add("selected");

              // filter sizes for this color
              const sizeDropdown = document.getElementById("popup-variant");
              sizeDropdown.innerHTML = "";
              product.variants
                .filter(v => v.option2 === color)
                .forEach(v => {
                  const opt = document.createElement("option");
                  opt.value = v.id;
                  opt.textContent = v.option1;
                  sizeDropdown.appendChild(opt);
                });
            });

            colorContainer.appendChild(wrapper);
          }); {% endcomment %}
          colors.forEach(color => {
  const swatch = document.createElement("div");
  swatch.className = "color-swatch";
  swatch.dataset.color = color;

  // ✅ Try to use actual color names as background (CSS recognizes common names like "red", "blue", "navy")
  // Or fallback to text if it’s not a valid CSS color
  swatch.style.backgroundColor = color;

  // If the color is something fancy like "Sky Blue" that CSS doesn’t recognize, keep the label
  if (swatch.style.backgroundColor === "") {
    swatch.textContent = color;
    swatch.style.border = "1px solid #ccc";
    swatch.style.padding = "5px";
  }

  swatch.addEventListener("click", () => {
    document.querySelectorAll(".color-swatch").forEach(s => s.classList.remove("selected"));
    swatch.classList.add("selected");

    // ✅ Filter sizes for this color
    const sizeDropdown = document.getElementById("popup-variant");
    sizeDropdown.innerHTML = "";
    product.variants
      .filter(v => v.option2 === color)
      .forEach(v => {
        const opt = document.createElement("option");
        opt.value = v.id;
        opt.textContent = v.option1;
        sizeDropdown.appendChild(opt);
      });
  });

  colorContainer.appendChild(swatch);
});


          // --- Auto-select first color ---
          if (colorContainer.firstChild) {
            colorContainer.firstChild.click();
          }

          // Show popup
          popup.classList.remove("hidden");
        });
    });
  });

  // Close popup
  popupClose.addEventListener("click", () => popup.classList.add("hidden"));
  popup.addEventListener("click", e => {
    if (e.target === popup) popup.classList.add("hidden");
  });
});

</script>


{% schema %}
{
  "name": "Custom Product Grid",
  "settings": [
    {
      "type": "product",
      "id": "product_1",
      "label": "Product 1"
    },
    {
      "type": "product",
      "id": "product_2",
      "label": "Product 2"
    },
    {
      "type": "product",
      "id": "product_3",
      "label": "Product 3"
    },
    {
      "type": "product",
      "id": "product_4",
      "label": "Product 4"
    },
    {
      "type": "product",
      "id": "product_5",
      "label": "Product 5"
    },
    {
      "type": "product",
      "id": "product_6",
      "label": "Product 6"
    }
  ],
  "presets": [
    {
      "name": "Custom Product Grid",
      "category": "Custom"
    }
  ]
}


{% endschema %}